// Generated by CoffeeScript 1.7.1
var MapGenerator, MapPosition;

MapPosition = (function() {
  function MapPosition(q, r) {
    this.q = q;
    this.r = r;
    this.owner = null;
    this.units = null;
  }

  MapPosition.prototype.setOwner = function(player, units) {
    this.owner = player;
    return this.units = units;
  };

  MapPosition.prototype.getNeighbors = function() {
    var neighbor, neighbor_offset, neighbors, neighbors_offsets, _i, _len;
    neighbors = [];
    neighbors_offsets = [[+1, 0], [+1, -1], [0, -1], [-1, 0], [-1, +1], [0, +1]];
    for (_i = 0, _len = neighbors_offsets.length; _i < _len; _i++) {
      neighbor_offset = neighbors_offsets[_i];
      neighbor = new MapPosition(this.q + neighbor_offset[0], this.r + neighbor_offset[1]);
      neighbors.push(neighbor);
    }
    return neighbors;
  };

  MapPosition.prototype.equals = function(other) {
    return other.q === this.q && other.r === this.r;
  };

  return MapPosition;

})();

MapGenerator = (function() {
  function MapGenerator(radius_q, radius_r, min_dense, threshold) {
    this.radius_q = radius_q;
    this.radius_r = radius_r;
    this.min_dense = min_dense;
    this.threshold = threshold;
    this.min_amount = Math.floor((2 * this.radius_q + 1) * (2 * this.radius_r + 1) * this.min_dense);
  }

  MapGenerator.prototype.generate = function() {
    var neighbor, position, process, _i, _len, _ref, _results;
    this.positions = [];
    process = [];
    process.push(this.getInitalPosition());
    _results = [];
    while (process.length > 0) {
      position = process.pop();
      _ref = Helper.shuffle_array(position.getNeighbors());
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        neighbor = _ref[_i];
        if (this.isValidPosition(neighbor)) {
          if (Math.random() < this.threshold || (process.length === 0 && this.positions.length < this.min_amount)) {
            if (!this.positionInArray(neighbor, process.concat(this.positions))) {
              process.push(neighbor);
            }
          }
        }
      }
      _results.push(this.positions.push(position));
    }
    return _results;
  };

  MapGenerator.prototype.positionInArray = function(position, positions) {
    var matches;
    matches = positions.filter(function(pos) {
      return pos.equals(position);
    });
    return matches.length > 0;
  };

  MapGenerator.prototype.getInitalPosition = function() {
    var p, q, r;
    while (true) {
      q = this.randomIntInRange(-this.radius_q, this.radius_q);
      r = this.randomIntInRange(-this.radius_r, this.radius_r);
      p = new MapPosition(q, r);
      if (this.isValidPosition(p)) {
        break;
      }
    }
    return p;
  };

  MapGenerator.prototype.randomIntInRange = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  MapGenerator.prototype.isValidPosition = function(position) {
    return Math.abs(position.q) <= this.radius_q && Math.abs(position.r) <= this.radius_r;
  };

  return MapGenerator;

})();
